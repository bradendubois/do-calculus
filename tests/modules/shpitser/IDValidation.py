#!/usr/bin/env python

#########################################################
#                                                       #
#   IDValidation                                        #
#                                                       #
#   Author: Braden Dubois (braden.dubois@usask.ca)      #
#   Written for: Dr. Eric Neufeld                       #
#                                                       #
#########################################################

from do.shpitser.identification.IDAlgorithm import ID
from do.probability.shpitser.identification.IDProcessing import parse_shpitser
from do.probability.shpitser.latent.LatentProjection import latent_projection
from do.probability.shpitser.structures.Expressions import Distribution

from do.probability.structures.CausalGraph import CausalGraph


# A runnable test to ensure / prove the equivalence of results generated by the backdoor-criterion with the
#   expressions generated by Shpitser & Pearl's Identification algorithm


def parity(cg: CausalGraph, cg_l: CausalGraph, y: set, x: set):

    latent1 = latent_projection(cg.graph, set())
    latent2 = latent_projection(cg_l.graph, {v for v in cg_l.latent if isinstance(v, str)})

    print()
    print(latent1)
    print(latent2)

    identification1 = ID(y, x, Distribution(cg.tables), latent1)
    result_no_latent = parse_shpitser(identification1, cg, dict())

    stored_computations.clear()

    identification2 = ID(y, x, Distribution(cg_l.tables), latent2)

    try:
        result_latent = parse_shpitser(identification2, cg_l, dict())
        return result_no_latent, result_latent
    except Exception:
        return result_no_latent, None


"""
loc = "./graphs/generated"
graph_files = [f for f in os.listdir(loc) if os.path.isfile(os.path.join(loc, f))]

corr = 0
fail = 0

for graph_file in [f for f in graph_files if not f.endswith("L.json")]:

    graph = CausalGraph(**parse_graph_file_data(loc + "/" + graph_file))
    graph2 = CausalGraph(**parse_graph_file_data(loc + "/" + graph_file.strip(".json") + "_L.json"))

    for y in power_set(graph.variables.keys() - graph2.latent, False):

        for x in power_set(set(graph.variables.keys()) - (set(y) | graph2.latent)):

            r1, r2 = parity(graph, graph2, set(y), set(x))

            if r1 and r2:
                assert r1 - r2 < 0.001, "{}: {} | {}, Got {} vs. {}, difference of {}".format(graph_file, y, x, r1, r2, abs(r1 - r2))
                corr += 1
            else:
                fail += 1

    break

print(corr, fail, corr + fail)
"""

data = parse_graph_file_data("./graphs/full/fumigants_eelworms.json")

eelworms = CausalGraph(**data)

success, message = basic_validation(eelworms, "N/A")

print(success)

latent = latent_projection(eelworms.graph, {x for x in eelworms.latent if isinstance(x, str)})

print(eelworms.graph)
print(latent)

r1 = parse_shpitser(ID({"Y"}, {"X"}, Distribution(eelworms.tables), latent_projection(eelworms.graph, set())), eelworms, dict())
r2 = parse_shpitser(ID({"Y"}, {"X"}, Distribution(eelworms.tables), latent), eelworms, dict())

print(r1, r2)
